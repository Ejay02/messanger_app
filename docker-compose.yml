services:
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - /var/lib/rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    env_file:
      - .env
    networks:
      - app-network

  auth:
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev auth
    networks:
      - app-network

  presence:
    build:
      context: ./
      dockerfile: ./apps/presence/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev presence
    networks:
      - app-network

  api:
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
    ports:
      - '4000:4000'
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - auth
      - presence
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev api
    networks:
      - app-network

  postgres:
    image: postgres
    env_file:
      - .env
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - postgres
    env_file:
      - .env
    ports:
      - '15432:80'
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
